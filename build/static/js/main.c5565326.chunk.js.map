{"version":3,"sources":["helpers/directory-helpers.tsx","components/popup.tsx","components/directory-table.tsx","components/app.tsx","index.tsx"],"names":["nameExists","name","directory","map","person","includes","PopUp","title","main","button","show","okButton","okCallBack","useState","buttonPressed","setButtonPressed","handleClick","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","DirectoryTable","persons","deleteCallBack","console","log","id","join","showDeletePopup","setShowDeletePopup","personToDelete","setPersonToDelete","personTextToDelete","setPersonTextToDelete","handleClose","handleDeleteClick","event","currentTarget","find","tel","animation","Table","striped","hover","bordered","responsive","size","key","serverUri","axios","get","then","catch","_err","App","setPersons","showPopUp","setShowPopUp","newPerson","setNewPerson","useEffect","response","statusText","data","err","alert","Error","createPerson","nameElement","document","getElementById","telElement","value","trim","focus","telExists","length","newPersonItem","post","concat","checkKey","nameExistsHtml","telExistsHtml","Container","Row","Col","md","Form","Group","Label","Control","type","placeholder","onKeyDown","Text","className","delete","filter","ReactDOM","render"],"mappings":"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","file":"static/js/main.c5565326.chunk.js","sourcesContent":["import { Person } from '../types/directory-types'\r\n\r\n/** Checks if the name already exists in the directory */\r\nconst nameExists = (name: string, directory: Person[]): boolean =>\r\n    directory.map(person => person.name).includes(name)\r\n\r\n/** Checks if the telephone number already exists in the directory */\r\nexport const telExists = (tel: string, directory: Person[]): boolean =>\r\n    directory.map(person => person.tel).includes(tel)\r\n\r\nexport default nameExists\r\n","// popup.tsx\r\n\r\nimport React, { useState } from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n/**\r\n * \"General purpose\" error popup\r\n */\r\nconst PopUp = ({ title, main, button, show, okButton, okCallBack }:\r\n    { title: string, main: JSX.Element, button: string, show: boolean, okButton?: string, okCallBack?: () => void }) => {\r\n    const [buttonPressed, setButtonPressed] = useState(false)\r\n\r\n    /**\r\n     * This is needed to make sure the popup is removed correctly\r\n     */\r\n    const handleClick = () => {\r\n        setButtonPressed(true)\r\n    }\r\n    if (!show && buttonPressed) {\r\n        setButtonPressed(false)\r\n    }\r\n\r\n    return (\r\n        <Modal show={show && !buttonPressed} onHide={handleClick}>\r\n            <Modal.Header closeButton >\r\n                <Modal.Title>{title}</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                {main}\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleClick}>{button}</Button>\r\n                {okButton ? <Button variant=\"secondary\" onClick={okCallBack}>{okButton}</Button> : <></>}\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default PopUp","import React, { useState } from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport { Person } from '../types/directory-types'\r\n\r\n\r\n/** Directory table element */\r\nconst DirectoryTable = ({ persons, deleteCallBack }:\r\n    /** Props type */\r\n    {\r\n        /** The telephone-directory database */\r\n        persons: Person[],\r\n        /** Function that deletes a record in database. Parameter: record id\r\n         */\r\n        deleteCallBack: (id: string) => void\r\n    }) => {\r\n    console.log(persons.map(person => person.id + \":\" + person.name).join(' , '))\r\n    const [showDeletePopup, setShowDeletePopup] = useState(false);\r\n    const [personToDelete, setPersonToDelete] = useState<Person>()\r\n    const [personTextToDelete, setPersonTextToDelete] = useState('')\r\n\r\n    /**\r\n     * Delete confirmation popup closing\r\n     */\r\n    const handleClose = () => setShowDeletePopup(false);\r\n\r\n    /**\r\n     * Handles delete mouse-click, invokes a confirmation popup\r\n     * @param event mouse event on delete button\r\n     */\r\n    const handleDeleteClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (event.currentTarget) {\r\n            const id = event.currentTarget.id\r\n            const person = persons.find(person => person.id === id)\r\n            setPersonToDelete(person)\r\n            setPersonTextToDelete(person ? `${person.name} / ${person.tel}` : '')\r\n            setShowDeletePopup(true)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback link to confirmation popup of one person from database - this actually calls the delete person\r\n     */\r\n    const deletePerson = () => {\r\n        if (personToDelete && personToDelete.id) {\r\n            deleteCallBack(personToDelete.id)\r\n        }\r\n        handleClose()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={showDeletePopup} onHide={handleClose} animation={false}>\r\n                <Modal.Body>Delete<em> {personTextToDelete} </em> ?</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"danger\" onClick={deletePerson}>Delete</Button>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>Cancel</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Table striped hover bordered responsive=\"sm\" size=\"sm\" >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <td>Number</td>\r\n                        <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {persons.map(person =>\r\n                        <tr key={person.id}>\r\n                            <th>\r\n                                {person.name}\r\n                            </th>\r\n                            <td>\r\n                                {person.tel}\r\n                            </td>\r\n                            <td>\r\n                                {<Button size=\"sm\" variant=\"light\" id={person.id} onClick={handleDeleteClick}><FaTrash /></Button>}\r\n                            </td>\r\n                        </tr>)}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DirectoryTable","/**\r\n * CRUD phonebook directory application \"phonebook-front\"\r\n * \r\n * @author Tapio Mäntysalo\r\n * @license MIT\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport { Person } from '../types/directory-types'\r\nimport nameExists, { telExists } from '../helpers/directory-helpers'\r\nimport PopUp from './popup'\r\nimport DirectoryTable from './directory-table'\r\n\r\nlet serverUri = '/api/persons/'\r\naxios\r\n    .get(serverUri).then()\r\n    .catch(_err => {\r\n        serverUri = 'https://phonebookback.azurewebsites.net/api/persons/'\r\n        axios\r\n            .get(serverUri).then()\r\n            .catch(_err => {\r\n                serverUri = 'http://localhost:3001/api/persons/'\r\n            })\r\n    })\r\nconsole.log(`Backend api: ${serverUri}`)\r\n\r\n/**\r\n * CRUD phonebook directory application \"phonebook-front\"\r\n * This is the main application.\r\n * \r\n * If name or telephone number already exists in the directory, informs the user and does not add the entry.\r\n * \r\n * If name or telephone number is missing, does not add an entry.\r\n * \r\n * Enter key or Add button adds the entry to the directory.\r\n * \r\n * Cursor is moved to the first field (name) after Enter, for easy adding of next entry.\r\n * \r\n * In case of a problem, cursor is moved to the input box with the problem.\r\n * \r\n * Telephone number and name are not validated, just trimmed.\r\n * \r\n * Each entry has a unique id.\r\n * \r\n * Entries can be deleted with the trash can icon.\r\n * @author Tapio Mäntysalo\r\n * @license MIT\r\n */\r\nconst App = () => {\r\n    type PopUpType = 'NONE' | 'NAME_EXISTS' | 'TEL__EXISTS'\r\n\r\n    /**\r\n     * States, by useState\r\n     */\r\n    console.log('useState')\r\n    const [persons, setPersons] = useState<Person[]>([])\r\n    const [showPopUp, setShowPopUp] = useState<PopUpType>('NONE')\r\n    const [newPerson, setNewPerson] = useState<Person>()\r\n\r\n    /**\r\n     *  Fetch the telephone directory from database\r\n     * This is connected to componentDidMount by useEffect()\r\n     */\r\n\r\n    /** Deletes a person from database, for good */\r\n    const deletePerson = function (id: string) {\r\n        console.log('deletePerson: ' + id)\r\n        axios\r\n            .delete(serverUri + id)\r\n            .then(response => {\r\n                console.log('deleted response from db: ' + response.statusText)\r\n                setPersons(persons.filter(person => person.id !== id))\r\n            })\r\n            .catch(err => {\r\n                alert('Backend ' + err)\r\n                throw new Error(err)\r\n            }\r\n            )\r\n    }\r\n\r\n    /**\r\n     *  Fetch the telephone directory from database\r\n     * This is connected to componentDidMount by useEffect()\r\n     */\r\n    const readPersons = function () {\r\n        console.log('readPersons')\r\n        axios\r\n            .get(serverUri)\r\n            .then(response => {\r\n                console.log('read response from db: ' + response.statusText)\r\n                setPersons(response.data)\r\n            })\r\n            .catch(err => {\r\n                alert('Backend ' + err)\r\n                throw new Error(err)\r\n            }\r\n            )\r\n    }\r\n    console.log('useEffect')\r\n    useEffect(readPersons, [])     // Empty array tells react that it is necessary to call this only once => componentDidMount effect.\r\n\r\n    /**\r\n     * CREATE a new entry to the telephone directory\r\n     * @description \r\n     * If name or telephone number already exists in the directory, informs the user and does not add the entry\r\n     * If name or telephone number is missing, does not add an entry\r\n     * Enter key or Add button adds the entry to the directory\r\n     * Cursor is moved to the first field (name) after Enter, for easy adding of next entry\r\n     * In case of a problem, cursor is moved to the input box with the problem\r\n     * Telephone number and name are not validated, just trimmed\r\n     * Each entry has a unique id\r\n     */\r\n    const createPerson = () => {\r\n        const nameElement = (document.getElementById('input-name') as HTMLInputElement)\r\n        const telElement = (document.getElementById('input-tel') as HTMLInputElement)\r\n        const name = nameElement.value.trim()\r\n        const tel = telElement.value.trim()\r\n        if (nameExists(name, persons)) {\r\n            setNewPerson({ name: name, tel: tel })\r\n            setShowPopUp('NAME_EXISTS')\r\n            nameElement.focus()\r\n            nameElement.value = ''\r\n        }\r\n        else if (telExists(tel, persons)) {\r\n            setNewPerson({ name: name, tel: tel })\r\n            setShowPopUp('TEL__EXISTS')\r\n            telElement.focus()\r\n            telElement.value = ''\r\n        } else {\r\n            if (!(name.length > 0)) {\r\n                nameElement.focus()\r\n            } else if (!(tel.length > 0)) {\r\n                telElement.focus()\r\n            }\r\n            else {\r\n                const newPersonItem: Person = { name: name, tel: tel }\r\n                nameElement.value = ''\r\n                telElement.value = ''\r\n                nameElement.focus()\r\n                axios\r\n                    .post(serverUri, newPersonItem)\r\n                    .then(response => {\r\n                        console.log('created to database: ' + response.statusText)\r\n                        newPersonItem.id = response.data.id\r\n                        setPersons(persons.concat(newPersonItem))\r\n                    })\r\n                    .catch(err => {\r\n                        alert('Backend ' + err)\r\n                        throw new Error(err)\r\n                    }\r\n                    )\r\n            }\r\n            setShowPopUp('NONE')\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Make enter key to \"submit\" also, in addition to \"Add\" button\r\n     * @param event key event\r\n     */\r\n    const checkKey = (event: any) => {\r\n        setShowPopUp('NONE')\r\n        if (event.key === 'Enter') {\r\n            createPerson()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * These are predefined texts for the error popups\r\n     */\r\n    const nameExistsHtml = <div>Name <em>{newPerson?.name}</em> already exists in directory</div>\r\n    const telExistsHtml = <div>Phone number <em>{newPerson?.tel}</em> already exists in directory</div>\r\n\r\n    /**\r\n     * render\r\n     */\r\n    console.log('render')\r\n    return (\r\n        <Container>\r\n            <PopUp title=\"Duplicate entry\" main={showPopUp === 'NAME_EXISTS' ? nameExistsHtml : telExistsHtml}\r\n                button=\"Ok\" show={showPopUp !== 'NONE'} />\r\n            <Row>\r\n                <Col md=\"auto\">\r\n                    <h2>Telephone Directory</h2>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"auto\">\r\n                    <Form.Group>\r\n                        <Form.Label>New name</Form.Label>\r\n                        <Form.Control id=\"input-name\" type=\"text\" placeholder=\"Enter new name\" onKeyDown={checkKey} />\r\n                        <Form.Text className=\"text-muted\">\r\n                            We'll never say your name aloud.\r\n                        </Form.Text>\r\n                        <Form.Label>Phone number</Form.Label>\r\n                        <Form.Control id=\"input-tel\" type=\"tel\" placeholder=\"Enter phone number\" onKeyDown={checkKey} />\r\n                        <Form.Text className=\"text-muted\">\r\n                            Any number-like entry will do.\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"auto\">\r\n                    <Button onClick={createPerson}>Add</Button>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"auto\">\r\n                    <p></p>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"auto\">\r\n                    <DirectoryTable persons={persons} deleteCallBack={deletePerson} />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default App","/** \r\n * Full Stack 2, 2020\r\n * Exercises Part\r\n * Phonebook-front\r\n */\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './components/app'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}