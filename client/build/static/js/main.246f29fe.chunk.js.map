{"version":3,"sources":["helpers/directory-helpers.tsx","components/popup.tsx","components/directory-table.tsx","components/app.tsx","index.tsx"],"names":["nameExists","name","directory","map","person","includes","PopUp","title","main","button","show","okButton","okCallBack","useState","buttonPressed","setButtonPressed","handleClick","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","DirectoryTable","persons","deleteCallBack","console","log","_id","join","showDeletePopup","setShowDeletePopup","personToDelete","setPersonToDelete","personTextToDelete","setPersonTextToDelete","handleClose","handleDeleteClick","event","currentTarget","id","find","tel","animation","Table","striped","hover","bordered","responsive","size","key","App","setPersons","showPopUp","setShowPopUp","newPerson","setNewPerson","serverUri","window","location","href","createPerson","nameElement","document","getElementById","telElement","value","trim","focus","telExists","length","newPersonItem","axios","post","then","response","statusText","searchPersons","catch","err","alert","checkKey","searchElement","textToSearch","searchText","get","data","readPersons","useEffect","nameExistsHtml","telExistsHtml","Container","style","maxWidth","Row","Col","Form","Group","Label","Control","type","placeholder","onKeyDown","xs","span","offset","Dropdown","Toggle","Menu","Item","onKeyUp","delete","filter","ReactDOM","render"],"mappings":"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","file":"static/js/main.246f29fe.chunk.js","sourcesContent":["import { Person } from '../types/directory-types'\r\n\r\n/** Checks if the name already exists in the directory */\r\nconst nameExists = (name: string, directory: Person[]): boolean =>\r\n    directory.map(person => person.name).includes(name)\r\n\r\n/** Checks if the telephone number already exists in the directory */\r\nexport const telExists = (tel: string, directory: Person[]): boolean =>\r\n    directory.map(person => person.tel).includes(tel)\r\n\r\nexport default nameExists\r\n","// popup.tsx\r\n\r\nimport React, { useState } from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n/**\r\n * \"General purpose\" error popup\r\n */\r\nconst PopUp = ({ title, main, button, show, okButton, okCallBack }:\r\n    { title: string, main: JSX.Element, button: string, show: boolean, okButton?: string, okCallBack?: () => void }) => {\r\n    const [buttonPressed, setButtonPressed] = useState(false)\r\n\r\n    /**\r\n     * This is needed to make sure the popup is removed correctly\r\n     */\r\n    const handleClick = () => {\r\n        setButtonPressed(true)\r\n    }\r\n    if (!show && buttonPressed) {\r\n        setButtonPressed(false)\r\n    }\r\n\r\n    return (\r\n        <Modal show={show && !buttonPressed} onHide={handleClick}>\r\n            <Modal.Header closeButton >\r\n                <Modal.Title>{title}</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                {main}\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={handleClick}>{button}</Button>\r\n                {okButton ? <Button variant=\"secondary\" onClick={okCallBack}>{okButton}</Button> : <></>}\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default PopUp","import React, { useState } from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport { Person } from '../types/directory-types'\r\n\r\n\r\n/** Directory table element */\r\nconst DirectoryTable = ({ persons, deleteCallBack }:\r\n    /** Props type */\r\n    {\r\n        /** The telephone-directory database */\r\n        persons: Person[],\r\n        /** Function that deletes a record in database. Parameter: record id\r\n         */\r\n        deleteCallBack: (id: string) => void\r\n    }) => {\r\n    console.log(persons.map(person => person._id + \":\" + person.name).join(' , '))\r\n    const [showDeletePopup, setShowDeletePopup] = useState(false);\r\n    const [personToDelete, setPersonToDelete] = useState<Person>()\r\n    const [personTextToDelete, setPersonTextToDelete] = useState('')\r\n\r\n    /**\r\n     * Delete confirmation popup closing\r\n     */\r\n    const handleClose = () => setShowDeletePopup(false);\r\n\r\n    /**\r\n     * Handles delete mouse-click, invokes a confirmation popup\r\n     * @param event mouse event on delete button\r\n     */\r\n    const handleDeleteClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (event.currentTarget) {\r\n            const id = event.currentTarget.id\r\n            const person = persons.find(person => person._id === id)\r\n            setPersonToDelete(person)\r\n            setPersonTextToDelete(person ? `${person.name} / ${person.tel}` : '')\r\n            setShowDeletePopup(true)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback link to confirmation popup of one person from database - this actually calls the delete person\r\n     */\r\n    const deletePerson = () => {\r\n        if (personToDelete && personToDelete._id) {\r\n            deleteCallBack(personToDelete._id)\r\n        }\r\n        handleClose()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={showDeletePopup} onHide={handleClose} animation={false}>\r\n                <Modal.Body>Delete<em> {personTextToDelete} </em> ?</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"danger\" onClick={deletePerson}>Delete</Button>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>Cancel</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Table striped hover bordered responsive=\"sm\" size=\"sm\" >\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <td>Number</td>\r\n                        <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {persons.map(person =>\r\n                        <tr key={person._id}>\r\n                            <th>\r\n                                {person.name}\r\n                            </th>\r\n                            <td>\r\n                                {person.tel}\r\n                            </td>\r\n                            <td>\r\n                                {<Button size=\"sm\" variant=\"light\" id={person._id} onClick={handleDeleteClick}><FaTrash /></Button>}\r\n                            </td>\r\n                        </tr>)}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DirectoryTable","/**\r\n * CRUD phonebook directory application \"phonebook-front\"\r\n * \r\n * @author Tapio Mäntysalo\r\n * @license MIT\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport { Person } from '../types/directory-types'\r\nimport nameExists, { telExists } from '../helpers/directory-helpers'\r\nimport PopUp from './popup'\r\nimport DirectoryTable from './directory-table'\r\n\r\n\r\n/**\r\n * CRUD phonebook directory application \"phonebook-front\"\r\n * This is the main application.\r\n * \r\n * If name or telephone number already exists in the directory, informs the user and does not add the entry.\r\n * \r\n * If name or telephone number is missing, does not add an entry.\r\n * \r\n * Enter key or Add button adds the entry to the directory.\r\n * \r\n * Cursor is moved to the first field (name) after Enter, for easy adding of next entry.\r\n * \r\n * In case of a problem, cursor is moved to the input box with the problem.\r\n * \r\n * Telephone number and name are not validated, just trimmed.\r\n * \r\n * Each entry has a unique id.\r\n * \r\n * Entries can be deleted with the trash can icon.\r\n * @author Tapio Mäntysalo\r\n * @license MIT\r\n */\r\nconst App = () => {\r\n    type PopUpType = 'NONE' | 'NAME_EXISTS' | 'TEL__EXISTS'\r\n\r\n    /**\r\n     * States, by useState\r\n     */\r\n    console.log('useState')\r\n    const [persons, setPersons] = useState<Person[]>([])\r\n    const [showPopUp, setShowPopUp] = useState<PopUpType>('NONE')\r\n    const [newPerson, setNewPerson] = useState<Person>()\r\n\r\n    /**\r\n     * Backend server address solving\r\n     */\r\n    const serverUri = window.location.href === 'http://localhost:3000/'\r\n        ? 'http://localhost:3001/api/persons/' : '/api/persons/'\r\n    console.log(`Backend api: ${serverUri}`)\r\n\r\n\r\n    /**\r\n     *  Fetch the telephone directory from database\r\n     * This is connected to componentDidMount by useEffect()\r\n     */\r\n\r\n    /** Deletes a person from database, for good */\r\n    const deletePerson = function (id: string) {\r\n        console.log('deletePerson: ' + id)\r\n        axios\r\n            .delete(serverUri + id)\r\n            .then(response => {\r\n                console.log('deleted response from db: ' + response.statusText)\r\n                setPersons(persons.filter(person => person._id !== id))     // Trustig that no one else is using the db\r\n            })\r\n            .catch(err => {\r\n                alert('Backend ' + err)\r\n            })\r\n    }\r\n\r\n    /**\r\n     *  Fetch the telephone directory from database\r\n     * This is connected to componentDidMount by useEffect()\r\n     */\r\n    const readPersons = function (textToSearch: string | undefined) {\r\n        const searchText = (!textToSearch || textToSearch === '') ? '_' : textToSearch\r\n        console.log(`readPersons: ${searchText} `)\r\n        axios\r\n            .get(`${serverUri}search/${searchText}`)\r\n            .then(response => {\r\n                console.log('read response from db: ' + response.statusText)\r\n                setPersons(response.data)\r\n            })\r\n            .catch(err => {\r\n                alert('Backend ' + err)\r\n            })\r\n    }\r\n    console.log('useEffect')\r\n\r\n    /**\r\n     * CREATE a new entry to the telephone directory\r\n     * @description \r\n     * If name or telephone number already exists in the directory, informs the user and does not add the entry\r\n     * If name or telephone number is missing, does not add an entry\r\n     * Enter key or Add button adds the entry to the directory\r\n     * Cursor is moved to the first field (name) after Enter, for easy adding of next entry\r\n     * In case of a problem, cursor is moved to the input box with the problem\r\n     * Telephone number and name are not validated, just trimmed\r\n     * Each entry has a unique id\r\n     */\r\n    const createPerson = () => {\r\n        const nameElement = (document.getElementById('input-name') as HTMLInputElement)\r\n        const telElement = (document.getElementById('input-tel') as HTMLInputElement)\r\n        const name = nameElement.value.trim()\r\n        const tel = telElement.value.trim()\r\n        if (nameExists(name, persons)) {\r\n            setNewPerson({ name: name, tel: tel })\r\n            setShowPopUp('NAME_EXISTS')\r\n            nameElement.focus()\r\n            nameElement.value = ''\r\n        }\r\n        else if (telExists(tel, persons)) {\r\n            setNewPerson({ name: name, tel: tel })\r\n            setShowPopUp('TEL__EXISTS')\r\n            telElement.focus()\r\n            telElement.value = ''\r\n        } else {\r\n            if (!(name.length > 0)) {\r\n                nameElement.focus()\r\n            } else if (!(tel.length > 0)) {\r\n                telElement.focus()\r\n            }\r\n            else {\r\n                const newPersonItem: Person = { name: name, tel: tel }\r\n                nameElement.value = ''\r\n                telElement.value = ''\r\n                axios\r\n                    .post(serverUri, newPersonItem)\r\n                    .then(response => {\r\n                        console.log('created to database: ' + response.statusText)\r\n                        searchPersons()       // Database will allocate the id => refresh all!\r\n                        nameElement.focus()\r\n                    })\r\n                    .catch(err => {\r\n                        alert('Backend ' + err)\r\n                    })\r\n            }\r\n            setShowPopUp('NONE')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make enter key to \"submit\" also, in addition to \"Add\" button\r\n     * @param event key event\r\n     */\r\n    const checkKey = (event: any) => {\r\n        setShowPopUp('NONE')\r\n        if (event.key === 'Enter') {\r\n            createPerson()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Each keypress into search box will launch a search query\r\n     * @param event key event\r\n     */\r\n    const searchPersons = () => {\r\n        const searchElement = (document.getElementById('search-box') as HTMLInputElement)\r\n        const searchText = searchElement.value.trim()\r\n        readPersons(searchText)\r\n        searchElement.focus()\r\n    }\r\n    useEffect(searchPersons, [])     // Empty array tells react that it is necessary to call this only once => componentDidMount effect.\r\n\r\n    /**\r\n     * These are predefined texts for the error popups\r\n     */\r\n    const nameExistsHtml = <div>Name <em>{newPerson?.name}</em> already exists in directory</div>\r\n    const telExistsHtml = <div>Phone number <em>{newPerson?.tel}</em> already exists in directory</div>\r\n\r\n    /**\r\n     * Format container\r\n     */\r\n    const contStyle = {\r\n        maxWidth: \"600px\"\r\n    }\r\n\r\n     /**\r\n     * render\r\n     */\r\n    console.log('render')\r\n    return (\r\n        <Container style={contStyle}>\r\n            <Row>\r\n                <Col>\r\n                    <p></p>\r\n                    <PopUp title=\"Duplicate entry\" main={showPopUp === 'NAME_EXISTS' ? nameExistsHtml : telExistsHtml}\r\n                        button=\"Ok\" show={showPopUp !== 'NONE'} />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <h2>Telephone Directory</h2>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Label>New name</Form.Label>\r\n                                <Form.Control size=\"sm\" id=\"input-name\" type=\"text\" placeholder=\"Enter new name\" onKeyDown={checkKey} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Label>Phone number</Form.Label>\r\n                                <Form.Control size=\"sm\" id=\"input-tel\" type=\"tel\" placeholder=\"Enter phone number\" onKeyDown={checkKey} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={{ span: 3, offset: 3 }}>\r\n                    <Button size=\"sm\" onClick={createPerson}>\r\n                        Add&nbsp;person\r\n                        </Button>\r\n                </Col>\r\n                <Col xs={{ span: 3, offset: 1 }}>\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle size=\"sm\" variant=\"info\" id=\"dropdown-basic\">\r\n                            Documentation\r\n                            </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item href=\"/client-doc\">Client documentation</Dropdown.Item>\r\n                            <Dropdown.Item href=\"/server-doc\">Server documentation</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Label>Search</Form.Label>\r\n                                <Form.Control id=\"search-box\" type=\"text\" placeholder=\"Start typing to limit search results\" onKeyUp={searchPersons} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <p></p>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <DirectoryTable persons={persons} deleteCallBack={deletePerson} />\r\n                </Col>\r\n            </Row>\r\n        </Container >\r\n    )\r\n}\r\n\r\nexport default App","/** \r\n * Full Stack 2, 2020\r\n * Exercises Part\r\n * Phonebook-front\r\n */\r\n\r\n// import 'bootstrap/dist/css/bootstrap.css'\r\n// import './css/simplex.bootstrap.min.css'    // https://bootswatch.com/4/simplex/bootstrap.min.css\r\n// import './css/sketchy.bootstrap.min.css'\r\n// import './css/slate.bootstrap.min.css'\r\n// import './css/cosmo.bootstrap.min.css'\r\nimport './css/yeti.bootstrap.min.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './components/app'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n"],"sourceRoot":""}